
#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#ifndef _MSC_VER
#include <unistd.h>
#endif
#include <stdlib.h>

#include <event2/event.h>

#include <json.h>

#include "gateway.hpp"
#include "gateway-libevent.h"

 * To showcase that this is all asynchronous, independent of the above a clock
 * will be shown at the last line of output, updated every second. */


/* The clock update timer. */

struct event *clock_update_timer;
static void
clock_update(int fd, short kind, void *userp)
{
	/* Print current time. */
	time_t t = time(NULL);
	int now_s = t % 60;
	int now_m = (t / 60) % 60;
	int now_h = (t / 3600) % 24;
	/* The trailing \r will make cursor return to the beginning
	 * of the current line. */
	printf("%02d:%02d:%02d\r", now_h, now_m, now_s);
	fflush(stdout);

	/* Next clock update in one second. */
	/* (A more prudent timer strategy would be to update clock
	 * on the next second _boundary_.) */
	struct timeval timeout = { SFINIT(.tv_sec, 1), SFINIT(.tv_usec, 0) };
	evtimer_add(clock_update_timer, &timeout);
}

/* The callback chain.

static void publish(Gateway &p);
static void publish_done(Gateway &p, enum gateway_res result, json_object *response, void *ctx_data, void *call_data);

static void history(Gateway &p);
static void history_received(Gateway &p, enum gateway_res result, json_object *msg, void *ctx_data, void *call_data);

static void subscribe(PubNub &p);
static void subscribe_receivved(Gateway &p, enum gateway_res result, std::vector<std::string> &channels, json_object *msg, void *ctx_data, void *call_data);

static void
publish(Gateway &p)
{
	json_object *msg = json_object_new_object();
	json_object_object_add(msg, "num", json_object_new_int(42));
	json_object_object_add(msg, "str", json_object_new_string("\"Hello, world!\" she said."));

	p.publish("my_channel", *msg, -1, publish_done);

	json_object_put(msg);

	/* ...continues later in publish_done(). */
}

static void
publish_done gateway &p, enum pubnub_res result, json_object *msg, void *ctx_data, void *call_data)
{
	/* ctx_data is (struct gateway_libevent *) */
	/* call_data is NULL as that's what we passed to gateway_publish() */

	if (result != PNR_OK)
		/* An unrecoverable error, we just terminate with an
		 * error code. Since pubnub_error_policy()'s print is
		 * true by default, an explanation has already been
		 * written to stderr and we tried to retry as well. */
		exit(EXIT_FAILURE);

	std::cout << "Gateway publish ok" << std::endl;

	/* Next step in the sequence is retrieving history. */

	history(p);
}


static void
history(Gateway &p)
Gateway{
	p.history("my_channel", 10, -1, history_received);

	/* ...continues later in history_received(). */
}

static void
history_received(Gateway &p, enum gateway_res result, json_object *msg, void *ctx_data, void *call_data)
{
	/* ctx_data is (struct gateway_libevent *) */
	/* call_data is NULL as that's what we passed to Gateway_history() */

	if (result != PNR_OK)
		exit(EXIT_FAILURE);

	std::cout << "gateway history ok: " << json_object_get_string(msg) << std::endl;


	/* Next step in the sequence is entering the subscribe "loop". */

	subscribe(p);
}


/* How does channel subscription work? The subscribe() call will issue
 * a PubNub subscribe request and call subscribe_received() when some
 * messages arrived. subscribe_received() will process the messages,
 * then "loop" by calling subscribe() again to issue a new request. */

static void
subscribe(Gateway &p)
{
	std::vector<std::string> channels;
	channels.push_back("my_channel");
	channels.push_back("demo_channel");

	p.subscribe_multi(channels, -1, subscribe_received);

	/* ...continues later in subscribe_received(). */
}

static void
subscribe_received(Gateway &p, enum pubnub_res result, std::vector<std::string> &channels, json_object *msg, void *ctx_data, void *call_data)
{
	/* ctx_data is (struct gateway_libevent *) */
	/* call_data is NULL as that's what we passed to gateway_subscribe_multi() */

	if (result != PNR_OK)
		/* This must be something fatal, we retry on recoverable
		 * errors. */
		exit(EXIT_FAILURE);

	if (json_object_array_length(msg) == 0) {
		std::cout << "gateway subscribe ok, no news" << std::endl;
	} else {
		for (int i = 0; i < json_object_array_length(msg); i++) {
			json_object *msg1 = json_object_array_get_idx(msg, i);
			std::cout << "gateway subscribe ["
				<< channels[i]
				<< "]: " << json_object_get_string(msg1)
				<< std::endl;
		}
	}

	/* Loop. */
	subscribe(p);
}


int
main(void)
{
	/* Set up the libevent library. */
	struct event_base *evbase = event_base_new();

	/* Set up the Gateway library, with a single shared context,
	 * using the libevent backend for event handling. */
	Gateway p("demo", "demo", &pubnub_libevent_callbacks, gateway_libevent_init(evbase));

	/* Set the clock update timer. */
	clock_update_timer = evtimer_new(evbase, clock_update, NULL);
	clock_update(-1, EV_TIMEOUT, NULL);

	/* First step in the Gateway call sequence is publishing a message. */
	publish(p);

	/* Here, we could start any other asynchronous operations as needed,
	 * launch a GUI or whatever. */

	/* Start the event loop. */
	event_base_dispatch(evbase);

	/* We should never reach here. */
	event_base_free(evbase);
	return EXIT_SUCCESS;
}
